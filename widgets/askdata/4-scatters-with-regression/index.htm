<!--
    THIS EXAMPLE WAS DOWNLOADED FROM https://echarts.apache.org/examples/en/editor.html?c=scatter-linear-regression
-->
<!DOCTYPE html>
<html style="height: 100%">
    <head>
        <meta charset="utf-8">
        
    	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">


		<!-- These imports are required -->
		
		<script src="/lib/scripts/utils.js"></script>
		
		<script src="/lib/scripts/env.js"></script>
		
		<script src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>

		<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js"></script>
		
		
		
		<script src="/lib/scripts/jquery.min.js"></script>
		
		
		<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js"></script>


        
        
		<!-- These import is needed for calculate regression -->
		<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts-stat@latest/dist/ecStat.min.js"></script>

	    <!-- You can leave this library import if you use Mustache library otherwise you can remove it -->
        <script src="https://unpkg.com/mustache@latest"></script>
	
		<!-- Default styling -->
		
		<link href="/lib/styles/css" rel="stylesheet" type="text/css">
        <link rel="stylesheet" type="text/css" href="/lib/styles/style.css">
		
	</head>
	
		<body style="height: 100%; width: 100%; margin: 0">
       		<div id="container" style="height: 100%; width: 100%"></div>
   		</body>
		
		
    <script type="text/javascript">
        
        
        

$.ajax({        

url: environment_widget + "/smartinsight/widgets/" + getUrlParameter('widgetId'),
type: "GET",
async: false,
beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + getToken() 
 ).setRequestHeader('Content-Type','application/json')},
success: function(data) {
        
	var dom = document.getElementById("container");
	
	var myChart = echarts.init(dom);
	var app = {};
	
	var option;


	// See https://github.com/ecomfe/echarts-stat
	echarts.registerTransform(ecStat.transform.regression);

    

    function check_thousand(value) {
        return value >= 1000;
    }


    var dataAll = [[ ]];


    if (data.fields.y_1.data.every(check_thousand) == true) {

        for(var i=0; i<data.fields.y_1.data.length; i++)

    
            dataAll[0].push([parseFloat(data.fields.x_1.data[i]), parseFloat(data.fields.y_1.data[i])/1000]);
    
            } 
            else {
                
                    for(var i=0; i<data.fields.y_1.data.length; i++)
                
                    dataAll[0].push([parseFloat(data.fields.x_1.data[i]), parseFloat(data.fields.y_1.data[i])]);
                
        
            }


    var grids = [];
    var xAxes = [];
    var yAxes = [];
    var series = [];
    var titles = [];

    var datasets = [];



    var grid_names = [title_1.name, "title_2", "title_3", "title_4"];

    var count = 0;

    for(var i=0; i<grid_names.length; i++) {
    
        datasets.push({
            source: dataAll[0]
        }, {
        transform: {
            type: 'ecStat:regression'
        }
        });

        grids.push({
            show: false
        });
    
        xAxes.push({
            gridIndex: i,  offset: 15,
            min: function (value) {
                return Math.round(value.min) - 1;
            },
            max: function (value) {
                return Math.round(value.max) + 1;
            },
            axisLabel: {
            
                formatter: "{value} %"
                        },
        
        });
    
        yAxes.push(
            {
            gridIndex: i, offset: 15,
            min: function (value) {
                return Math.round(value.min) - 1;
            },
            max: function (value) {
                return Math.round(value.max) + 1;
            },
            splitNumber: 4,
            axisLabel: {
                formatter: "{value} â‚¬"
                        }
        });
    
        series.push({
            name: 'scatter',
            type: 'scatter',
            xAxisIndex: i,
            yAxisIndex: i,
            datasetIndex: count,
        },
        {
            name: 'line',
            type: 'line',
            datasetIndex: count + 1,
            symbolSize: 0.1,
            xAxisIndex: i,
            yAxisIndex: i,
        });
    
        titles.push({
            textAlign: 'center',
            text: grid_names[i],
            textStyle: {
                fontSize: 20,
                fontWeight: 'normal'
            }
        });
    
        count = count + 2;
    }

    grids.forEach(function (grid, idx) {
    
        grid.width = '30%';
        grid.height = '30%';
    
        if (idx == 0) {
            grid.left = '15%';
            grid.top = '7%';
            titles[idx].left = parseFloat(grid.left) + parseFloat(grid.width) / 2.2 + '%';
            titles[idx].top = parseFloat(grid.top) - 6 + '%';
        } 
        else if (idx == 1) {
            grid.right = '5%';
            grid.top = '7%';
            titles[idx].right = parseFloat(grid.right) + parseFloat(grid.width) / 2.8 + '%';
            titles[idx].top = parseFloat(grid.top) - 6 + '%';
        
        }
        else if (idx == 2) {
            grid.left = '15%';
            grid.bottom = '7%';
            titles[idx].left = parseFloat(grid.left) + parseFloat(grid.width) / 2.2 + '%';
            titles[idx].bottom = parseFloat(grid.bottom) + 32 + '%';
        }
        else if (idx == 3) {
            grid.right = '5%';
            grid.bottom = '7%';
            titles[idx].right = parseFloat(grid.right) + parseFloat(grid.width) / 2.8 + '%';
            titles[idx].bottom = parseFloat(grid.bottom) + 32 + '%';
        }
    
    
    
    
    });

    option = {
        title: titles,
        dataset: datasets,
        grid: grids,
        xAxis: xAxes,
        yAxis: yAxes,
        series: series
    };

if (option && typeof option === 'object') {
    myChart.setOption(option);
}
}
});

        </script>
</html>
    