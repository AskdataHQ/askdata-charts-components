<!DOCTYPE html>
<html style="height: 100%">
    <head>
        <meta charset="utf-8">

<!-- Beginning Include Libraries -->

<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<script src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
<script src="/lib/scripts/utils.js"></script>
<script src="/lib/scripts/env.js"></script>
<script src="/lib/scripts/jquery.min.js"></script>
<link href="/lib/styles/css" rel="stylesheet" type="text/css">
<link rel="stylesheet" type="text/css" href="/lib/styles/style.css">
<script src="https://unpkg.com/mustache@latest"></script>

<!-- End Include Libraries -->

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js"></script>

    </head>
    <body style="height: 100%; margin: 0">
        <div id="container" style="height: 100%"></div>
    </body>


<!-- Beginning Include Data Request -->
 <script>


//environment_widget = "https://api-dev.askdata.com";
//environment_widget = "https://api.askdata.com"  // prod  da togliere quando porto su...

// Request charting data
$.ajax({

       url: environment_widget +"/smartinsight/widgets/" + getUrlParameter('widgetId'),
       type: "GET",
       async: false,
       beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + getToken() 
        ).setRequestHeader('Content-Type','application/json')},
       success: function(data) { 

            
            var result1 = data.fields.m2_id.data.map(function (x) { 
            return parseInt(x, 10); 
            });
 
            var datasets = data.fields.m1_id.data.map(function(v,i) {
                    return {'dimension':v, 'sequence':result1[i],'measure':data.fields.m3_id.data[i]};
                });  
          
          

            var dom = document.getElementById("container");
            var myChart = echarts.init(dom);
            var app = {};

            var option;

            // Load from the main dimension the series
    
            

            console.log(datasets);
            

            /* sorting by match_day */
  
            datasets.sort((a, b) => (a.sequence > b.sequence) ? 1 : -1)

           
            var labelAxes = [];
            var namesAxes = [];
            //iterate through sequence and dimension
            datasets.forEach(function(item) {
                  //get the value of name
                  var val = item.dimension
                  var val2 = item.sequence
                  labelAxes.push(val)
                  namesAxes.push(val2);
            });
            
            //Array.from(new Set(namesAxes));
            $.unique(labelAxes);
            var labelAxesUnique = Array.from(new Set(labelAxes));
            var namesAxesUnique = Array.from(new Set(namesAxes));
 
           
           
                
            var y1 = [];
            var y2 = [];
            datasets.forEach(function(item) {
                    if (item.dimension == labelAxesUnique[0]){
                        y1.push(item.measure)
                    }
            });

            datasets.forEach(function(item) {
                    if (item.dimension == labelAxesUnique[1]){
                        y2.push(item.measure)
                    }

                

     
                  });
            y1 = y1.filter(function( element ) {
                           return element !== undefined;
                        });
            y2 = y2.filter(function( element ) {
                           return element !== undefined;
                        });

            console.log(y1);
            console.log(datasets);

            //prints ["1", "2", "3"]

            option = { 
                legend: {
                    data: labelAxesUnique, 
                },
                xAxis: {
                    type: 'category',
                    data: namesAxesUnique,
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: labelAxesUnique[0],
                    data: y1,
                    type: 'line',
                    showSymbol: false,
                    smooth: false,
                        lineStyle: {
                        color: '#02a1db',
                        width: 4
                    },
                    itemStyle: {
                        borderWidth: 4,
                        color: '#02a1db'
                    }
                },{
                    name: labelAxesUnique[1],
                    data: y2,
                    type: 'line',
                    showSymbol: false,
                    smooth: false,
                        lineStyle: {
                        color: '#011EA0',
                        width: 4
                    },
                    itemStyle: {
                        borderWidth: 4,
                        color: '#011EA0'
                    }
                }]
            };

            if (option && typeof option === 'object') {
                myChart.setOption(option);
            }
        
        }
  });

/*
// Redirect to login if not authenticated 
$(document).ajaxError(function( event, jqxhr, settings, exception ) {
    if ( jqxhr.status== 401 ) {
      location.replace(environment_auth+"/login");

    }
});
*/

</script>
<!-- End Include Data Request -->

</html>
    