<!DOCTYPE html>
<html>
<head>
<title>Askdata - Streamgraph</title>
<!-- Beginning Include Header -->
<!--# include virtual="/charts/askdata/_includes/header.html" -->
<!-- End Include Header -->
<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
</head>
<body>
<!-- Beginning Include Watermak -->
<!--# include virtual="/charts/askdata/_includes/watermark.html" -->
<!-- End Include Watermak -->

<div id="container">
  <div id="my_dataviz"></div>
</div>
<script>

// Function that transform reponse valid for the D3 parse CVS call
function prepareData(data, replace_null) {

  var str = 'year';

  for (i in data.resultSet.dimension.labels) {

      str += ','
      str += data.resultSet.dimension.labels[i];

  }

  str += '\n'; 

  for (i in data.resultSet.measures) {

    var line = '' + i;
    
    for (var index in data.resultSet.measures[i].numericValues) {
      
      if (line != '') {line += ','}
        
        // Replace null value with the input
        if (replace_null && (typeof data.resultSet.measures[i].numericValues[index] == 'undefined') || (data.resultSet.measures[i].numericValues[index] == null)) {
          line += '' + replace_null
        } else {
          line += data.resultSet.measures[i].numericValues[index];
        }

    }

    str += line + '\n';

  }

  return str

}

function displayChart(dataviz) {
    
    // set the dimensions and margins of the graph
var margin = {top: 20, right: 30, bottom: 30, left: 60},
    width = window.innerWidth - margin.left - margin.right,
    height = window.innerHeight - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#my_dataviz")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

  // Parse the Data
  console.log("before transformation")
  console.log(dataviz)
  var data = d3.csvParse(prepareData(dataviz,"0"))
  console.log("after transformation")
  console.log(data)

  // List of groups = header of the csv files
  var keys = data.columns.slice(1)

  // Add X axis
  var x = d3.scaleLinear()
    .domain(d3.extent(data, function(d) { return d.year; }))
    .range([ 0, width ]);
  svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x).ticks(5));

  // Add Y axis
  var y = d3.scaleLinear()
    .domain([-100000, 100000])
    .range([ height, 0 ]);
  svg.append("g")
    .call(d3.axisLeft(y));

defaultColors = ['rgb(84,48,5)','rgb(140,81,10)','rgb(191,129,45)','rgb(223,194,125)','rgb(246,232,195)','rgb(245,245,245)','rgb(199,234,229)','rgb(128,205,193)','rgb(53,151,143)','rgb(1,102,94)','rgb(0,60,48)'];

  // color palette
  var color = d3.scaleOrdinal()
    .domain(keys)
    .range(defaultColors)

  //stack the data?
  var stackedData = d3.stack()
    .offset(d3.stackOffsetSilhouette)
    .keys(keys)
    (data)

  // Show the areas
  svg
    .selectAll("mylayers")
    .data(stackedData)
    .enter()
    .append("path")
      .style("fill", function(d) { return color(d.key); })
      .attr("d", d3.area()
        .x(function(d, i) { return x(d.data.year); })
        .y0(function(d) { return y(d[0]); })
        .y1(function(d) { return y(d[1]); })
    )

}

// Beinning include Request-data
<!--# include virtual="/charts/askdata/_includes/request-data.js" -->
// End include Request-data

</script>

</body>
</html>
