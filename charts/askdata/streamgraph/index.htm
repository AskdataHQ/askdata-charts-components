<!DOCTYPE html>
<!-- saved from url=(0073)https://storage.googleapis.com/askdata-smartchart/prod/horizontal_bar.htm -->
<html class="js-focus-visible" data-js-focus-visible=""><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>Horizontal Bar Chart</title>
  <meta charset="utf-8">
  <script src="/lib/scripts/Chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
  <script src="/lib/scripts/utils.js"></script>
  <script src="/lib/scripts/env.js"></script>
  <script src="/lib/scripts/jquery.min.js"></script>
  <link href="/lib/styles/css" rel="stylesheet" type="text/css">
  <link rel="stylesheet" type="text/css" href="/lib/styles/style.css">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<!-- Create a div where the graph will take place -->
<div id="my_dataviz"></div>


<script type="text/javascript">

	var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
    }
};

// set the dimensions and margins of the graph
var margin = {top: 20, right: 30, bottom: 30, left: 60},
    width = 460 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#my_dataviz")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

// Parse the Data
d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/5_OneCatSevNumOrdered_wide.csv", function(data) {

  // List of groups = header of the csv files
  var keys = data.columns.slice(1)

  // Add X axis
  var x = d3.scaleLinear()
    .domain(d3.extent(data, function(d) { return d.year; }))
    .range([ 0, width ]);
  svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x).ticks(5));

  // Add Y axis
  var y = d3.scaleLinear()
    .domain([-100000, 100000])
    .range([ height, 0 ]);
  svg.append("g")
    .call(d3.axisLeft(y));

  // color palette
  var color = d3.scaleOrdinal()
    .domain(keys)
    .range(['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf'])

  //stack the data?
  var stackedData = d3.stack()
    .offset(d3.stackOffsetSilhouette)
    .keys(keys)
    (data)

  // Show the areas
  svg
    .selectAll("mylayers")
    .data(stackedData)
    .enter()
    .append("path")
      .style("fill", function(d) { return color(d.key); })
      .attr("d", d3.area()
        .x(function(d, i) { return x(d.data.year); })
        .y0(function(d) { return y(d[0]); })
        .y1(function(d) { return y(d[1]); })
    )

})
</script>

</script>
</head>
<body>
<div id="watermark"><img src="/lib/assets/askdata-logo.svg"></div>
<div id="container">
<canvas id="canvas"></canvas></div>
<script>
  
  if (getUrlParameter('token') != undefined){
  var token = getUrlParameter('token');
  }else{
  var token = Cookies.get('access_token')
  }
$.ajax({
         url: environment + "/charts/" + getUrlParameter('chartId'),
         type: "GET",
         beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + token 
          ).setRequestHeader('Content-Type','application/json')},
         success: function(data) { 
          console.log(data);
          //var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
          var MONTHS = [data.resultSet.dimension.labels];
    var color = Chart.helpers.color;
var measures = [];
for(var i in data.resultSet.measures) {  
    var item = data.resultSet.measures[i];
    
    // Smarter chart
    // TODO / to be removed Set accent color as the first color
    
    item.color = data.resultSet.color.palette[i];
    if (i==0) {item.color = data.resultSet.color.accent; }

    
    measures.push({ 
        "label" : item.name,
        "data" : item.numericValues,
        "backgroundColor": item.color,
        "borderColor": item.color
    });

}

    // Show legend if measures more than one
    var displayLegend = true
    
    if (measures.length == 1) {
      displayLegend = false;

    }

    var horizontalBarChartData = {
      labels: data.resultSet.dimension.labels,
      datasets: measures,
    };

    // Todo - replace with dynamic locale, rounding, currency and measurement units
    // Scales should be aggregated by measurement units
    // Color is used as 3rd axis if the measurements units are greaten than 2
    var labelNumberRoundTo = 2;
    var labelNumberLocale = 'en-US';
    var labelFontSize = 20;
    var labelFontFamily = "'Helvetica', sans-serif";
    var lebelNumberCurrency = null;
    var lebelNumberMeasurmenentUnit = null;

      var ctx = document.getElementById('canvas').getContext('2d');
      window.myHorizontalBar = new Chart(ctx, {
        type: 'horizontalBar',
        data: horizontalBarChartData,
        options: {
          // Elements options apply to all of the options unless overridden in a dataset
          // In this case, we are setting the border of each horizontal bar to be 2px wide
          elements: {
            rectangle: {
              borderWidth: 2,
            }
          },
          responsive: true,
          maintainAspectRatio:false,
          legend: {
            display : displayLegend,
            position: 'top',
            align: 'center',
            fontSize:30,
            padding: 5,
          },
          scales: {

                        yAxes: [{ticks: {fontSize: labelFontSize, fontFamily: labelFontFamily}}],
                        xAxes: [{ticks: {fontSize: labelFontSize, fontFamily: labelFontFamily,callback: function(value, index, values) {
                        return new Intl.NumberFormat(labelNumberLocale).format(parseFloat(value).toFixed(labelNumberRoundTo));
                    }}}]
                    },
          title: {
            display: true,
            text: data.title,
            fontSize: 30,
            fontStyle:'normal'
          }
        }
      });
    var colorNames = Object.keys(window.chartColors);
}
});  
  </script>

</body><loom-container id="lo-engage-ext-container"><div></div><loom-shadow classname="resolved"></loom-shadow></loom-container></html>